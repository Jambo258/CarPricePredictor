stages:
  - lint
  - setup
  - test
  - deploy

lint-client-job:
  image: node:18-alpine
  stage: lint
  script:
    - cd client
    - npm install
    - npm run lint

lint-server-job:
  image: node:18-alpine
  stage: lint
  script:
    - cd server
    - npm install
    - npm run lint

cypress-setup-job:
  image: docker:latest

  services:
    - docker:dind
  variables:
    DOCKER_COMPOSE_FILE: ./docker-compose.yml
    POSTGRES_USER: pguser
    POSTGRES_PASSWORD: pgpass
    POSTGRES_DB: postgres
    PG_HOST: postgres
    PG_PORT: 5432
    VITE_BACKEND_URL: http://api:3001
  stage: setup
  before_script:
    - docker-compose -f $DOCKER_COMPOSE_FILE up -d
    - sleep 30

  script:
    - docker-compose -f $DOCKER_COMPOSE_FILE run e2e npm run cy:run:pipe
  coverage: /Statements\s+:\s(\d+.?\d+)%/

  after_script:
    - docker-compose -f $DOCKER_COMPOSE_FILE down

backend-test-job:
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_COMPOSE_FILE: ./docker-compose.yml
    POSTGRES_USER: pguser
    POSTGRES_PASSWORD: pgpass
    POSTGRES_DB: postgres
    PG_HOST: postgres
    PG_PORT: 5432
  stage: test
  before_script:
    - docker-compose -f $DOCKER_COMPOSE_FILE up -d
    - sleep 30
  script:
    - docker-compose -f $DOCKER_COMPOSE_FILE run api npm run tests:coverage
  coverage: /All\sfiles.*?\s+(\d+.\d+)/

  after_script:
    - docker-compose -f $DOCKER_COMPOSE_FILE down

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
