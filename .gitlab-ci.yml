stages:
  - lint
  - setup
  - test
  - deploy

lint-client-job:
  image: node:18-alpine
  stage: lint
  script:
    - cd client
    - npm install
    - npm run lint

lint-server-job:
  image: node:18-alpine
  stage: lint
  script:
    - cd server
    - npm install
    - npm run lint

cypress-setup-job:
  image: docker:latest
  #image: cypress/browsers:node14.16.0-chrome89-ff86
  services:
    - docker:dind
  variables:
    DOCKER_COMPOSE_FILE: ./docker-compose.yml
    POSTGRES_USER: pguser
    POSTGRES_PASSWORD: pgpass
    POSTGRES_DB: postgres
    PG_HOST: postgres
    PG_PORT: 5432
  stage: setup
  script:
    - docker-compose -f $DOCKER_COMPOSE_FILE up -d
    - sleep 30
  #script:
  #  - npm ci
  #  - npm run cy:run

cypress-test-job:
  #image: docker:latest
  image: cypress/browsers:node-20.9.0-chrome-118.0.5993.88-1-ff-118.0.2-edge-118.0.2088.46-1
  services:
    - docker:dind
  variables:
    DOCKER_COMPOSE_FILE: ./docker-compose.yml
    POSTGRES_USER: pguser
    POSTGRES_PASSWORD: pgpass
    POSTGRES_DB: postgres
    PG_HOST: postgres
    PG_PORT: 5432
  stage: test
  
  script:
    - npm ci
    - npm run cy:run

  after_script:
    - docker-compose -f $DOCKER_COMPOSE_FILE down

backend-test-job:
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_COMPOSE_FILE: ./docker-compose.yml
    POSTGRES_USER: pguser
    POSTGRES_PASSWORD: pgpass
    POSTGRES_DB: postgres
    PG_HOST: postgres
    PG_PORT: 5432
  stage: test
  before_script:
    - docker-compose -f $DOCKER_COMPOSE_FILE up -d
    - sleep 30
  script:
    - docker-compose -f $DOCKER_COMPOSE_FILE run api npm run tests:coverage
  coverage: /All\sfiles.*?\s+(\d+.\d+)/

  after_script:
    - docker-compose -f $DOCKER_COMPOSE_FILE down

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
