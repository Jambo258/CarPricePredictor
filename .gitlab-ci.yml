stages:
  - lint
  - test
  - deploy

lint-client-job:
  image: node:18-alpine
  stage: lint
  script:
    - cd client
    - npm install
    - npm run lint

lint-server-job:
  image: node:18-alpine
  stage: lint
  script:
    - cd server
    - npm install
    - npm run lint

#backend-test-job:
#  image: node:18-alpine
#  services:
#    - postgres:15.2
#  variables:
#    POSTGRES_USER: pguser
#    POSTGRES_PASSWORD: pgpass
#    POSTGRES_DB: postgres
#    PG_HOST: postgres
#    PG_PORT: 5432
#  stage: test
#  script:
#    - cd server
#    - npm install
#    - sleep 15
#    - npm run tests

backend-test-job:
  image: docker:latest
  services:
    - docker:dind
  variables:
    POSTGRES_USER: pguser
    POSTGRES_PASSWORD: pgpass
    POSTGRES_DB: postgres
    PG_HOST: postgres
    PG_PORT: 5432
  stage: test
  script:
    - docker-compose up -d
    - sleep 30
    - cd server
    - docker-compose run npm run tests

  after_script:
  - docker-compose down

lint-test-job:
  stage: test
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
